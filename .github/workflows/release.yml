name: "Release new version"

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  releasetag:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[RELEASE]') || contains(github.event_name, 'workflow')"
    steps:
      - uses: actions/checkout@v2
      - name: Generate Semantic Release Version
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub release
        id: release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: ${{ steps.semantic.outputs.new_release_version }}
      - shell: bash
        run: |
          echo "${{ steps.release.outputs.upload_url }}" > url.txt
      - name: Upload upload_url
        uses: actions/upload-artifact@v1
        with:
          name: upload_url
          path: url.txt

      - shell: bash
        run: |
          echo "${{ steps.semantic.outputs.new_release_version }}" > release.txt
      - name: Upload release_version
        uses: actions/upload-artifact@v1
        with:
          name: release_version
          path: release.txt

  pyinstaller:
    runs-on: ${{ matrix.config.os }}
    needs: [releasetag]
    name: Package the application using PyInstaller
    strategy:
      matrix:
        config:
          - { os: ubuntu-latest, arch: x64, name: linux, extension: "" }
          - { os: windows-latest, arch: x64, name: windows, extension: ".exe" }

    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: ${{ matrix.config.arch }}
      - name: Package the app using PyInstaller
        run: |
          pip install pip pipenv --upgrade
          pipenv install --dev --deploy
          pipenv run pyinstaller hikload.spec

      - uses: actions/upload-artifact@v2
        with:
          name: hikload-${{ matrix.config.name }}-${{ matrix.config.arch }}
          path: dist/hikload${{ matrix.config.extension }}

      - name: Download upload_url
        uses: actions/download-artifact@v1
        with:
          name: upload_url
      - id: releaseurl
        run: |
          echo "::set-output name=url::$(cat upload_url/url.txt)"
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.releaseurl.outputs.url }}
          asset_path: dist/hikload${{ matrix.config.extension }}
          asset_name: hikload-${{ matrix.config.name }}-${{ matrix.config.arch }}${{ matrix.config.extension }}
          asset_content_type: application/octet-stream

  pypipublish:
    runs-on: ubuntu-latest
    needs: [releasetag]
    name: Package the application and publish it to PyPi

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          pip install pip pipenv --upgrade
          pip install build pipenv-setup

      - name: Download upload_url
        uses: actions/download-artifact@v1
        with:
          name: upload_url

      - name: Download release
        uses: actions/download-artifact@v1
        with:
          name: release_version
      - id: version
        run: |
          echo "::set-output name=VERSION::$(cat release_version/release.txt)"

      - name: Find the old version and replace it with the newly released one
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "\\d\\.\\d\\.\\d"
          replace: ${{ steps.version.outputs.VERSION }}
          include: "setup.py"
          regex: true

      - name: Sync dependencies from Pipfile to setup.py
        run: |
          pipenv-setup sync

      - uses: EndBug/add-and-commit@v8
        with:
          default_author: github_actions
          message: "ci: increment version in setup.py"

      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@717ba43cfbb0387f6ce311b169a825772f54d295
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  dockerpublish:
    runs-on: ubuntu-latest
    needs: [releasetag]
    name: Package the application and publish it to Github Packages

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: tedyst
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download release
        uses: actions/download-artifact@v1
        with:
          name: release_version
      - id: version
        run: |
          echo "::set-output name=VERSION::$(cat release_version/release.txt)"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/tedyst/hikload:${{ steps.version.outputs.VERSION }}
            ghcr.io/tedyst/hikload:latest
          cache-from: type=gha
          cache-to: type=gha
          platforms: linux/amd64,linux/arm64
